
Passing fds > FD_SETSIZE to FD_SET gives undefined behaviour; avoid it.

Proper fix is to use poll() where available rather than select().

--- a/ext/sockets/sockets.c
+++ b/ext/sockets/sockets.c
@@ -525,6 +525,7 @@ int php_sock_array_to_fd_set(zval *sock_
 
 		php_sock = (php_socket*) zend_fetch_resource(element TSRMLS_CC, -1, le_socket_name, NULL, 1, le_socket);
 		if (!php_sock) continue; /* If element is not a resource, skip it */
+        if (php_sock->bsd_socket > FD_SETSIZE) continue; /* must ignore it */
 
 		FD_SET(php_sock->bsd_socket, fds);
 		if (php_sock->bsd_socket > *max_fd) {
--- a/ext/standard/file.c
+++ b/ext/standard/file.c
@@ -686,6 +686,9 @@ static int stream_array_to_fd_set(zval *
 		 * is not displayed.
 		 * */
 		if (SUCCESS == php_stream_cast(stream, PHP_STREAM_AS_FD_FOR_SELECT | PHP_STREAM_CAST_INTERNAL, (void*)&this_fd, 1)) {
+            if (this_fd > FD_SETSIZE)
+                continue;
+
 			FD_SET(this_fd, fds);
 			if (this_fd > *max_fd) {
 				*max_fd = this_fd;
--- a/main/network.c
+++ b/main/network.c
@@ -276,7 +276,7 @@ PHPAPI int php_connect_nonb(int sockfd,
 	fd_set wset;
 	fd_set eset;
 
-	if (timeout == NULL)	{
+	if (timeout == NULL || sockfd > FD_SETSIZE)	{
 		/* blocking mode */
 		return connect(sockfd, addr, addrlen);
 	}
@@ -1002,6 +1002,8 @@ static void php_sock_stream_wait_for_dat
 	int retval;
 	struct timeval timeout, *ptimeout;
 
+        if (sock->socket > FD_SETSIZE) return;
+
 	FD_ZERO(&fdr);
 	FD_SET(sock->socket, &fdr);
 	sock->timeout_event = 0;
@@ -1178,6 +1180,9 @@ int _php_network_is_stream_alive(php_str
 	fd_set rfds;
 	struct timeval tv = {0, 0};
 	char buf;
+
+        if (fd > FD_SETSIZE)
+                return 1;
 	
 	/* logic: if the select call indicates that there is data to
 	 * be read, but a read returns 0 bytes of data, then the socket
